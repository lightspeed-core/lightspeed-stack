@startuml classes
set namespaceSeparator none
class "AccessRule" as src.models.config.AccessRule {
  actions : list[Action]
  role : str
}
class "Action" as src.models.config.Action {
  name
}
class "AuthenticationConfiguration" as src.models.config.AuthenticationConfiguration {
  jwk_config : Optional[JwkConfiguration]
  jwk_configuration
  k8s_ca_cert_path : Optional[FilePath]
  k8s_cluster_api : Optional[AnyHttpUrl]
  module : str
  skip_tls_verification : bool
  check_authentication_model() -> Self
}
class "AuthorizationConfiguration" as src.models.config.AuthorizationConfiguration {
  access_rules : Optional[list[AccessRule]]
}
class "CORSConfiguration" as src.models.config.CORSConfiguration {
  allow_credentials : bool
  allow_headers : list[str]
  allow_methods : list[str]
  allow_origins : list[str]
  check_cors_configuration() -> Self
}
class "Configuration" as src.models.config.Configuration {
  authentication : Optional[AuthenticationConfiguration]
  authorization : Optional[AuthorizationConfiguration]
  customization : Optional[Customization]
  database : Optional[DatabaseConfiguration]
  inference : Optional[InferenceConfiguration]
  llama_stack
  mcp_servers : Optional[list[ModelContextProtocolServer]]
  name : str
  service
  user_data_collection
  dump(filename: str) -> None
}
class "ConfigurationBase" as src.models.config.ConfigurationBase {
  model_config
}
class "Customization" as src.models.config.Customization {
  disable_query_system_prompt : bool
  system_prompt : Optional[str]
  system_prompt_path : Optional[FilePath]
  check_customization_model() -> Self
}
class "DatabaseConfiguration" as src.models.config.DatabaseConfiguration {
  config
  db_type
  postgres : Optional[PostgreSQLDatabaseConfiguration]
  sqlite : Optional[SQLiteDatabaseConfiguration]
  check_database_configuration() -> Self
}
class "InferenceConfiguration" as src.models.config.InferenceConfiguration {
  default_model : Optional[str]
  default_provider : Optional[str]
  check_default_model_and_provider() -> Self
}
class "JsonPathOperator" as src.models.config.JsonPathOperator {
  name
}
class "JwkConfiguration" as src.models.config.JwkConfiguration {
  jwt_configuration : Optional[JwtConfiguration]
  url : AnyHttpUrl
}
class "JwtConfiguration" as src.models.config.JwtConfiguration {
  role_rules : Optional[list[JwtRoleRule]]
  user_id_claim : str
  username_claim : str
}
class "JwtRoleRule" as src.models.config.JwtRoleRule {
  compiled_regex
  jsonpath : str
  negate : bool
  operator
  roles : list[str]
  value : Any
  check_jsonpath() -> Self
  check_regex_pattern() -> Self
  check_roles() -> Self
}
class "LlamaStackConfiguration" as src.models.config.LlamaStackConfiguration {
  api_key : Optional[SecretStr]
  library_client_config_path : Optional[str]
  url : Optional[str]
  use_as_library_client : Optional[bool]
  check_llama_stack_model() -> Self
}
class "ModelContextProtocolServer" as src.models.config.ModelContextProtocolServer {
  name : str
  provider_id : str
  url : str
}
class "PostgreSQLDatabaseConfiguration" as src.models.config.PostgreSQLDatabaseConfiguration {
  ca_cert_path : Optional[FilePath]
  db : str
  gss_encmode : str
  host : str
  namespace : Optional[str]
  password : SecretStr
  port : Annotated
  ssl_mode : str
  user : str
  check_postgres_configuration() -> Self
}
class "SQLiteDatabaseConfiguration" as src.models.config.SQLiteDatabaseConfiguration {
  db_path : str
}
class "ServiceConfiguration" as src.models.config.ServiceConfiguration {
  access_log : bool
  auth_enabled : bool
  color_log : bool
  cors : Optional[CORSConfiguration]
  host : str
  port : Annotated
  tls_config : Optional[TLSConfiguration]
  workers : Annotated
  check_service_configuration() -> Self
}
class "TLSConfiguration" as src.models.config.TLSConfiguration {
  tls_certificate_path : Optional[FilePath]
  tls_key_password : Optional[FilePath]
  tls_key_path : Optional[FilePath]
  check_tls_configuration() -> Self
}
class "UserDataCollection" as src.models.config.UserDataCollection {
  feedback_enabled : bool
  feedback_storage : Optional[str]
  transcripts_enabled : bool
  transcripts_storage : Optional[str]
  check_storage_location_is_set_when_needed() -> Self
}
src.models.config.AccessRule --|> src.models.config.ConfigurationBase
src.models.config.AuthenticationConfiguration --|> src.models.config.ConfigurationBase
src.models.config.AuthorizationConfiguration --|> src.models.config.ConfigurationBase
src.models.config.CORSConfiguration --|> src.models.config.ConfigurationBase
src.models.config.Configuration --|> src.models.config.ConfigurationBase
src.models.config.Customization --|> src.models.config.ConfigurationBase
src.models.config.DatabaseConfiguration --|> src.models.config.ConfigurationBase
src.models.config.InferenceConfiguration --|> src.models.config.ConfigurationBase
src.models.config.JwkConfiguration --|> src.models.config.ConfigurationBase
src.models.config.JwtConfiguration --|> src.models.config.ConfigurationBase
src.models.config.JwtRoleRule --|> src.models.config.ConfigurationBase
src.models.config.LlamaStackConfiguration --|> src.models.config.ConfigurationBase
src.models.config.ModelContextProtocolServer --|> src.models.config.ConfigurationBase
src.models.config.PostgreSQLDatabaseConfiguration --|> src.models.config.ConfigurationBase
src.models.config.SQLiteDatabaseConfiguration --|> src.models.config.ConfigurationBase
src.models.config.ServiceConfiguration --|> src.models.config.ConfigurationBase
src.models.config.TLSConfiguration --|> src.models.config.ConfigurationBase
src.models.config.UserDataCollection --|> src.models.config.ConfigurationBase
src.models.config.JsonPathOperator --* src.models.config.JwtRoleRule : operator
src.models.config.LlamaStackConfiguration --* src.models.config.Configuration : llama_stack
src.models.config.SQLiteDatabaseConfiguration --* src.models.config.DatabaseConfiguration : sqlite
src.models.config.ServiceConfiguration --* src.models.config.Configuration : service
src.models.config.UserDataCollection --* src.models.config.Configuration : user_data_collection
@enduml
