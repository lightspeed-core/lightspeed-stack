{
    "openapi": "3.1.0",
    "info": {
        "title": "Lightspeed Core Service (LCS) service - OpenAPI",
        "summary": "Lightspeed Core Service (LCS) service API specification.",
        "description": "Lightspeed Core Service (LCS) service API specification.",
        "contact": {
            "name": "Pavel Tisnovsky",
            "url": "https://github.com/tisnik/",
            "email": "ptisnovs@redhat.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "0.2.0"
    },
    "servers": [
        {
            "url": "http://localhost:8080/",
            "description": "Locally running service"
        }
    ],
    "paths": {
        "/": {
            "get": {
                "tags": [
                    "root"
                ],
                "summary": "Root Endpoint Handler",
                "description": "Handle request to the / endpoint.",
                "operationId": "root_endpoint_handler__get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/info": {
            "get": {
                "tags": [
                    "info"
                ],
                "summary": "Info Endpoint Handler",
                "description": "Handle request to the /info endpoint.\n\nProcess GET requests to the /info endpoint, returning the\nservice name and version.\n\nReturns:\n    InfoResponse: An object containing the service's name and version.",
                "operationId": "info_endpoint_handler_v1_info_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InfoResponse"
                                }
                            }
                        },
                        "name": "Service name",
                        "version": "Service version"
                    }
                }
            }
        },
        "/v1/models": {
            "get": {
                "tags": [
                    "models"
                ],
                "summary": "Models Endpoint Handler",
                "description": "Handle requests to the /models endpoint.\n\nProcess GET requests to the /models endpoint, returning a list of available\nmodels from the Llama Stack service.\n\nRaises:\n    HTTPException: If unable to connect to the Llama Stack server or if\n    model retrieval fails for any reason.\n\nReturns:\n    ModelsResponse: An object containing the list of available models.",
                "operationId": "models_endpoint_handler_v1_models_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ModelsResponse"
                                }
                            }
                        },
                        "models": [
                            {
                                "identifier": "all-MiniLM-L6-v2",
                                "metadata": {
                                    "embedding_dimension": 384
                                },
                                "api_model_type": "embedding",
                                "provider_id": "ollama",
                                "provider_resource_id": "all-minilm:latest",
                                "type": "model",
                                "model_type": "embedding"
                            },
                            {
                                "identifier": "llama3.2:3b-instruct-fp16",
                                "metadata": {},
                                "api_model_type": "llm",
                                "provider_id": "ollama",
                                "provider_resource_id": "llama3.2:3b-instruct-fp16",
                                "type": "model",
                                "model_type": "llm"
                            }
                        ]
                    },
                    "503": {
                        "description": "Connection to Llama Stack is broken"
                    }
                }
            }
        },
        "/v1/query": {
            "post": {
                "tags": [
                    "query"
                ],
                "summary": "Query Endpoint Handler",
                "description": "Handle request to the /query endpoint.\n\nProcesses a POST request to the /query endpoint, forwarding the\nuser's query to a selected Llama Stack LLM or agent and\nreturning the generated response.\n\nValidates configuration and authentication, selects the appropriate model\nand provider, retrieves the LLM response, updates metrics, and optionally\nstores a transcript of the interaction. Handles connection errors to the\nLlama Stack service by returning an HTTP 500 error.\n\nReturns:\n    QueryResponse: Contains the conversation ID and the LLM-generated response.",
                "operationId": "query_endpoint_handler_v1_query_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QueryRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QueryResponse"
                                }
                            }
                        },
                        "conversation_id": "123e4567-e89b-12d3-a456-426614174000",
                        "response": "LLM answer"
                    },
                    "400": {
                        "description": "Missing or invalid credentials provided by client",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User is not authorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "detail": {
                            "response": "Unable to connect to Llama Stack",
                            "cause": "Connection error."
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/streaming_query": {
            "post": {
                "tags": [
                    "streaming_query"
                ],
                "summary": "Streaming Query Endpoint Handler",
                "description": "Handle request to the /streaming_query endpoint.\n\nThis endpoint receives a query request, authenticates the user,\nselects the appropriate model and provider, and streams\nincremental response events from the Llama Stack backend to the\nclient. Events include start, token updates, tool calls, turn\ncompletions, errors, and end-of-stream metadata. Optionally\nstores the conversation transcript if enabled in configuration.\n\nReturns:\n    StreamingResponse: An HTTP streaming response yielding\n    SSE-formatted events for the query lifecycle.\n\nRaises:\n    HTTPException: Returns HTTP 500 if unable to connect to the\n    Llama Stack server.",
                "operationId": "streaming_query_endpoint_handler_v1_streaming_query_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QueryRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/config": {
            "get": {
                "tags": [
                    "config"
                ],
                "summary": "Config Endpoint Handler",
                "description": "Handle requests to the /config endpoint.\n\nProcess GET requests to the /config endpoint and returns the\ncurrent service configuration.\n\nReturns:\n    Configuration: The loaded service configuration object.",
                "operationId": "config_endpoint_handler_v1_config_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Configuration"
                                }
                            }
                        },
                        "name": "foo bar baz",
                        "service": {
                            "host": "localhost",
                            "port": 8080,
                            "auth_enabled": false,
                            "workers": 1,
                            "color_log": true,
                            "access_log": true,
                            "tls_config": {
                                "tls_certificate_path": "config/certificate.crt",
                                "tls_key_path": "config/private.key"
                            }
                        },
                        "llama_stack": {
                            "url": "http://localhost:8321",
                            "api_key": "xyzzy",
                            "use_as_library_client": false
                        },
                        "user_data_collection": {
                            "feedback_enabled": true,
                            "feedback_storage": "/tmp/data/feedback",
                            "transcripts_enabled": false
                        },
                        "mcp_servers": [
                            {
                                "name": "server1",
                                "provider_id": "provider1",
                                "url": "http://url.com:1"
                            },
                            {
                                "name": "server2",
                                "provider_id": "provider2",
                                "url": "http://url.com:2"
                            },
                            {
                                "name": "server3",
                                "provider_id": "provider3",
                                "url": "http://url.com:3"
                            }
                        ]
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "detail": {
                            "response": "Configuration is not loaded"
                        }
                    }
                }
            }
        },
        "/v1/feedback": {
            "post": {
                "tags": [
                    "feedback"
                ],
                "summary": "Feedback Endpoint Handler",
                "description": "Handle feedback requests.\n\nProcesses a user feedback submission, storing the feedback and\nreturning a confirmation response.\n\nArgs:\n    feedback_request: The request containing feedback information.\n    ensure_feedback_enabled: The feedback handler (FastAPI Depends) that\n        will handle feedback status checks.\n    auth: The Authentication handler (FastAPI Depends) that will\n        handle authentication Logic.\n\nReturns:\n    Response indicating the status of the feedback storage request.\n\nRaises:\n    HTTPException: Returns HTTP 500 if feedback storage fails.",
                "operationId": "feedback_endpoint_handler_v1_feedback_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FeedbackRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Feedback received and stored",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeedbackResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Missing or invalid credentials provided by client",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Client does not have permission to access resource",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "User feedback can not be stored",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/feedback/status": {
            "get": {
                "tags": [
                    "feedback"
                ],
                "summary": "Feedback Status",
                "description": "Handle feedback status requests.\n\nReturn the current enabled status of the feedback\nfunctionality.\n\nReturns:\n    StatusResponse: Indicates whether feedback collection is enabled.",
                "operationId": "feedback_status_v1_feedback_status_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StatusResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/conversations": {
            "get": {
                "tags": [
                    "conversations"
                ],
                "summary": "Get Conversations List Endpoint Handler",
                "description": "Handle request to retrieve all conversations for the authenticated user.",
                "operationId": "get_conversations_list_endpoint_handler_v1_conversations_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConversationsListResponse"
                                }
                            }
                        },
                        "conversations": [
                            {
                                "conversation_id": "123e4567-e89b-12d3-a456-426614174000",
                                "created_at": "2024-01-01T00:00:00Z",
                                "last_message_at": "2024-01-01T00:05:00Z",
                                "last_used_model": "gemini/gemini-1.5-flash",
                                "last_used_provider": "gemini",
                                "message_count": 5
                            },
                            {
                                "conversation_id": "456e7890-e12b-34d5-a678-901234567890",
                                "created_at": "2024-01-01T01:00:00Z",
                                "last_message_at": "2024-01-01T01:02:00Z",
                                "last_used_model": "gemini/gemini-2.0-flash",
                                "last_used_provider": "gemini",
                                "message_count": 2
                            }
                        ]
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "detail": {
                            "response": "Unable to connect to Llama Stack",
                            "cause": "Connection error."
                        }
                    }
                }
            }
        },
        "/v1/conversations/{conversation_id}": {
            "get": {
                "tags": [
                    "conversations"
                ],
                "summary": "Get Conversation Endpoint Handler",
                "description": "Handle request to retrieve a conversation by ID.\n\nRetrieve a conversation's chat history by its ID. Then fetches\nthe conversation session from the Llama Stack backend,\nsimplifies the session data to essential chat history, and\nreturns it in a structured response. Raises HTTP 400 for\ninvalid IDs, 404 if not found, 503 if the backend is\nunavailable, and 500 for unexpected errors.\n\nParameters:\n    conversation_id (str): Unique identifier of the conversation to retrieve.\n\nReturns:\n    ConversationResponse: Structured response containing the conversation\n    ID and simplified chat history.",
                "operationId": "get_conversation_endpoint_handler_v1_conversations__conversation_id__get",
                "parameters": [
                    {
                        "name": "conversation_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Conversation Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConversationResponse"
                                }
                            }
                        },
                        "conversation_id": "123e4567-e89b-12d3-a456-426614174000",
                        "chat_history": [
                            {
                                "messages": [
                                    {
                                        "content": "Hi",
                                        "type": "user"
                                    },
                                    {
                                        "content": "Hello!",
                                        "type": "assistant"
                                    }
                                ],
                                "started_at": "2024-01-01T00:00:00Z",
                                "completed_at": "2024-01-01T00:00:05Z"
                            }
                        ]
                    },
                    "404": {
                        "detail": {
                            "response": "Conversation not found",
                            "cause": "The specified conversation ID does not exist."
                        },
                        "description": "Not Found"
                    },
                    "503": {
                        "detail": {
                            "response": "Unable to connect to Llama Stack",
                            "cause": "Connection error."
                        },
                        "description": "Service Unavailable"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "conversations"
                ],
                "summary": "Delete Conversation Endpoint Handler",
                "description": "Handle request to delete a conversation by ID.\n\nValidates the conversation ID format and attempts to delete the\ncorresponding session from the Llama Stack backend. Raises HTTP\nerrors for invalid IDs, not found conversations, connection\nissues, or unexpected failures.\n\nReturns:\n    ConversationDeleteResponse: Response indicating the result of the deletion operation.",
                "operationId": "delete_conversation_endpoint_handler_v1_conversations__conversation_id__delete",
                "parameters": [
                    {
                        "name": "conversation_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Conversation Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConversationDeleteResponse"
                                }
                            }
                        },
                        "conversation_id": "123e4567-e89b-12d3-a456-426614174000",
                        "success": true,
                        "message": "Conversation deleted successfully"
                    },
                    "404": {
                        "detail": {
                            "response": "Conversation not found",
                            "cause": "The specified conversation ID does not exist."
                        },
                        "description": "Not Found"
                    },
                    "503": {
                        "detail": {
                            "response": "Unable to connect to Llama Stack",
                            "cause": "Connection error."
                        },
                        "description": "Service Unavailable"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/readiness": {
            "get": {
                "tags": [
                    "health"
                ],
                "summary": "Readiness Probe Get Method",
                "description": "Handle the readiness probe endpoint, returning service readiness.\n\nIf any provider reports an error status, responds with HTTP 503\nand details of unhealthy providers; otherwise, indicates the\nservice is ready.",
                "operationId": "readiness_probe_get_method_readiness_get",
                "responses": {
                    "200": {
                        "description": "Service is ready",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReadinessResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service is not ready",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReadinessResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/liveness": {
            "get": {
                "tags": [
                    "health"
                ],
                "summary": "Liveness Probe Get Method",
                "description": "Return the liveness status of the service.\n\nReturns:\n    LivenessResponse: Indicates that the service is alive.",
                "operationId": "liveness_probe_get_method_liveness_get",
                "responses": {
                    "200": {
                        "description": "Service is alive",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LivenessResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service is not alive",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LivenessResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/authorized": {
            "post": {
                "tags": [
                    "authorized"
                ],
                "summary": "Authorized Endpoint Handler",
                "description": "Handle request to the /authorized endpoint.\n\nProcess POST requests to the /authorized endpoint, returning\nthe authenticated user's ID and username.\n\nReturns:\n    AuthorizedResponse: Contains the user ID and username of the authenticated user.",
                "operationId": "authorized_endpoint_handler_authorized_post",
                "responses": {
                    "200": {
                        "description": "The user is logged-in and authorized to access OLS",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthorizedResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing or invalid credentials provided by client",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User is not authorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/metrics": {
            "get": {
                "tags": [
                    "metrics"
                ],
                "summary": "Metrics Endpoint Handler",
                "description": "Handle request to the /metrics endpoint.\n\nProcess GET requests to the /metrics endpoint, returning the\nlatest Prometheus metrics in form of a plain text.\n\nInitializes model metrics on the first request if not already\nset up, then responds with the current metrics snapshot in\nPrometheus format.",
                "operationId": "metrics_endpoint_handler_metrics_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AccessRule": {
                "properties": {
                    "role": {
                        "type": "string",
                        "title": "Role"
                    },
                    "actions": {
                        "items": {
                            "$ref": "#/components/schemas/Action"
                        },
                        "type": "array",
                        "title": "Actions"
                    }
                },
                "type": "object",
                "required": [
                    "role",
                    "actions"
                ],
                "title": "AccessRule",
                "description": "Rule defining what actions a role can perform."
            },
            "Action": {
                "type": "string",
                "enum": [
                    "admin",
                    "list_other_conversations",
                    "read_other_conversations",
                    "query_other_conversations",
                    "delete_other_conversations",
                    "query",
                    "streaming_query",
                    "get_conversation",
                    "list_conversations",
                    "delete_conversation",
                    "feedback",
                    "get_models",
                    "get_metrics",
                    "get_config",
                    "info"
                ],
                "title": "Action",
                "description": "Available actions in the system."
            },
            "Attachment": {
                "properties": {
                    "attachment_type": {
                        "type": "string",
                        "title": "Attachment Type",
                        "description": "The attachment type, like 'log', 'configuration' etc.",
                        "examples": [
                            "log"
                        ]
                    },
                    "content_type": {
                        "type": "string",
                        "title": "Content Type",
                        "description": "The content type as defined in MIME standard",
                        "examples": [
                            "text/plain"
                        ]
                    },
                    "content": {
                        "type": "string",
                        "title": "Content",
                        "description": "The actual attachment content",
                        "examples": [
                            "warning: quota exceeded"
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "attachment_type",
                    "content_type",
                    "content"
                ],
                "title": "Attachment",
                "description": "Model representing an attachment that can be send from the UI as part of query.\n\nA list of attachments can be an optional part of 'query' request.\n\nAttributes:\n    attachment_type: The attachment type, like \"log\", \"configuration\" etc.\n    content_type: The content type as defined in MIME standard\n    content: The actual attachment content\n\nYAML attachments with **kind** and **metadata/name** attributes will\nbe handled as resources with the specified name:\n```\nkind: Pod\nmetadata:\n    name: private-reg\n```",
                "examples": [
                    {
                        "attachment_type": "log",
                        "content": "this is attachment",
                        "content_type": "text/plain"
                    },
                    {
                        "attachment_type": "configuration",
                        "content": "kind: Pod\n metadata:\n name:    private-reg",
                        "content_type": "application/yaml"
                    },
                    {
                        "attachment_type": "configuration",
                        "content": "foo: bar",
                        "content_type": "application/yaml"
                    }
                ]
            },
            "AuthenticationConfiguration": {
                "properties": {
                    "module": {
                        "type": "string",
                        "title": "Module",
                        "default": "noop"
                    },
                    "skip_tls_verification": {
                        "type": "boolean",
                        "title": "Skip Tls Verification",
                        "default": false
                    },
                    "k8s_cluster_api": {
                        "anyOf": [
                            {
                                "type": "string",
                                "minLength": 1,
                                "format": "uri"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "K8S Cluster Api"
                    },
                    "k8s_ca_cert_path": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "file-path"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "K8S Ca Cert Path"
                    },
                    "jwk_config": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/JwkConfiguration"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object",
                "title": "AuthenticationConfiguration",
                "description": "Authentication configuration."
            },
            "AuthorizationConfiguration": {
                "properties": {
                    "access_rules": {
                        "items": {
                            "$ref": "#/components/schemas/AccessRule"
                        },
                        "type": "array",
                        "title": "Access Rules"
                    }
                },
                "type": "object",
                "title": "AuthorizationConfiguration",
                "description": "Authorization configuration."
            },
            "AuthorizedResponse": {
                "properties": {
                    "user_id": {
                        "type": "string",
                        "title": "User Id",
                        "description": "User ID, for example UUID",
                        "examples": [
                            "c5260aec-4d82-4370-9fdf-05cf908b3f16"
                        ]
                    },
                    "username": {
                        "type": "string",
                        "title": "Username",
                        "description": "User name",
                        "examples": [
                            "John Doe",
                            "Adam Smith"
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "user_id",
                    "username"
                ],
                "title": "AuthorizedResponse",
                "description": "Model representing a response to an authorization request.\n\nAttributes:\n    user_id: The ID of the logged in user.\n    username: The name of the logged in user.",
                "examples": [
                    {
                        "user_id": "123e4567-e89b-12d3-a456-426614174000",
                        "username": "user1"
                    }
                ]
            },
            "CORSConfiguration": {
                "properties": {
                    "allow_origins": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Allow Origins",
                        "default": [
                            "*"
                        ]
                    },
                    "allow_credentials": {
                        "type": "boolean",
                        "title": "Allow Credentials",
                        "default": false
                    },
                    "allow_methods": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Allow Methods",
                        "default": [
                            "*"
                        ]
                    },
                    "allow_headers": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Allow Headers",
                        "default": [
                            "*"
                        ]
                    }
                },
                "type": "object",
                "title": "CORSConfiguration",
                "description": "CORS configuration."
            },
            "Configuration": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "service": {
                        "$ref": "#/components/schemas/ServiceConfiguration"
                    },
                    "llama_stack": {
                        "$ref": "#/components/schemas/LlamaStackConfiguration"
                    },
                    "user_data_collection": {
                        "$ref": "#/components/schemas/UserDataCollection"
                    },
                    "database": {
                        "$ref": "#/components/schemas/DatabaseConfiguration",
                        "default": {
                            "sqlite": {
                                "db_path": "/tmp/lightspeed-stack.db"
                            }
                        }
                    },
                    "mcp_servers": {
                        "items": {
                            "$ref": "#/components/schemas/ModelContextProtocolServer"
                        },
                        "type": "array",
                        "title": "Mcp Servers",
                        "default": []
                    },
                    "authentication": {
                        "$ref": "#/components/schemas/AuthenticationConfiguration",
                        "default": {
                            "module": "noop",
                            "skip_tls_verification": false
                        }
                    },
                    "authorization": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/AuthorizationConfiguration"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "customization": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/Customization"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "inference": {
                        "$ref": "#/components/schemas/InferenceConfiguration",
                        "default": {}
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "service",
                    "llama_stack",
                    "user_data_collection"
                ],
                "title": "Configuration",
                "description": "Global service configuration."
            },
            "ConversationDeleteResponse": {
                "properties": {
                    "conversation_id": {
                        "type": "string",
                        "title": "Conversation Id"
                    },
                    "success": {
                        "type": "boolean",
                        "title": "Success"
                    },
                    "response": {
                        "type": "string",
                        "title": "Response"
                    }
                },
                "type": "object",
                "required": [
                    "conversation_id",
                    "success",
                    "response"
                ],
                "title": "ConversationDeleteResponse",
                "description": "Model representing a response for deleting a conversation.\n\nAttributes:\n    conversation_id: The conversation ID (UUID) that was deleted.\n    success: Whether the deletion was successful.\n    response: A message about the deletion result.\n\nExample:\n    ```python\n    delete_response = ConversationDeleteResponse(\n        conversation_id=\"123e4567-e89b-12d3-a456-426614174000\",\n        success=True,\n        response=\"Conversation deleted successfully\"\n    )\n    ```",
                "examples": [
                    {
                        "conversation_id": "123e4567-e89b-12d3-a456-426614174000",
                        "response": "Conversation deleted successfully",
                        "success": true
                    }
                ]
            },
            "ConversationDetails": {
                "properties": {
                    "conversation_id": {
                        "type": "string",
                        "title": "Conversation Id"
                    },
                    "created_at": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Created At"
                    },
                    "last_message_at": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Last Message At"
                    },
                    "message_count": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Message Count"
                    },
                    "last_used_model": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Last Used Model"
                    },
                    "last_used_provider": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Last Used Provider"
                    }
                },
                "type": "object",
                "required": [
                    "conversation_id"
                ],
                "title": "ConversationDetails",
                "description": "Model representing the details of a user conversation.\n\nAttributes:\n    conversation_id: The conversation ID (UUID).\n    created_at: When the conversation was created.\n    last_message_at: When the last message was sent.\n    message_count: Number of user messages in the conversation.\n    last_used_model: The last model used for the conversation.\n    last_used_provider: The provider of the last used model.\n\nExample:\n    ```python\n    conversation = ConversationDetails(\n        conversation_id=\"123e4567-e89b-12d3-a456-426614174000\"\n        created_at=\"2024-01-01T00:00:00Z\",\n        last_message_at=\"2024-01-01T00:05:00Z\",\n        message_count=5,\n        last_used_model=\"gemini/gemini-2.0-flash\",\n        last_used_provider=\"gemini\",\n    )\n    ```"
            },
            "ConversationResponse": {
                "properties": {
                    "conversation_id": {
                        "type": "string",
                        "title": "Conversation Id"
                    },
                    "chat_history": {
                        "items": {
                            "additionalProperties": true,
                            "type": "object"
                        },
                        "type": "array",
                        "title": "Chat History"
                    }
                },
                "type": "object",
                "required": [
                    "conversation_id",
                    "chat_history"
                ],
                "title": "ConversationResponse",
                "description": "Model representing a response for retrieving a conversation.\n\nAttributes:\n    conversation_id: The conversation ID (UUID).\n    chat_history: The simplified chat history as a list of conversation turns.\n\nExample:\n    ```python\n    conversation_response = ConversationResponse(\n        conversation_id=\"123e4567-e89b-12d3-a456-426614174000\",\n        chat_history=[\n            {\n                \"messages\": [\n                    {\"content\": \"Hello\", \"type\": \"user\"},\n                    {\"content\": \"Hi there!\", \"type\": \"assistant\"}\n                ],\n                \"started_at\": \"2024-01-01T00:01:00Z\",\n                \"completed_at\": \"2024-01-01T00:01:05Z\"\n            }\n        ]\n    )\n    ```",
                "examples": [
                    {
                        "chat_history": [
                            {
                                "completed_at": "2024-01-01T00:01:05Z",
                                "messages": [
                                    {
                                        "content": "Hello",
                                        "type": "user"
                                    },
                                    {
                                        "content": "Hi there!",
                                        "type": "assistant"
                                    }
                                ],
                                "started_at": "2024-01-01T00:01:00Z"
                            }
                        ],
                        "conversation_id": "123e4567-e89b-12d3-a456-426614174000"
                    }
                ]
            },
            "ConversationsListResponse": {
                "properties": {
                    "conversations": {
                        "items": {
                            "$ref": "#/components/schemas/ConversationDetails"
                        },
                        "type": "array",
                        "title": "Conversations"
                    }
                },
                "type": "object",
                "required": [
                    "conversations"
                ],
                "title": "ConversationsListResponse",
                "description": "Model representing a response for listing conversations of a user.\n\nAttributes:\n    conversations: List of conversation details associated with the user.\n\nExample:\n    ```python\n    conversations_list = ConversationsListResponse(\n        conversations=[\n            ConversationDetails(\n                conversation_id=\"123e4567-e89b-12d3-a456-426614174000\",\n                created_at=\"2024-01-01T00:00:00Z\",\n                last_message_at=\"2024-01-01T00:05:00Z\",\n                message_count=5,\n                last_used_model=\"gemini/gemini-2.0-flash\",\n                last_used_provider=\"gemini\",\n            ),\n            ConversationDetails(\n                conversation_id=\"456e7890-e12b-34d5-a678-901234567890\"\n                created_at=\"2024-01-01T01:00:00Z\",\n                message_count=2,\n                last_used_model=\"gemini/gemini-2.0-flash\",\n                last_used_provider=\"gemini\",\n            )\n        ]\n    )\n    ```",
                "examples": [
                    {
                        "conversations": [
                            {
                                "conversation_id": "123e4567-e89b-12d3-a456-426614174000",
                                "created_at": "2024-01-01T00:00:00Z",
                                "last_message_at": "2024-01-01T00:05:00Z",
                                "last_used_model": "gemini/gemini-2.0-flash",
                                "last_used_provider": "gemini",
                                "message_count": 5
                            },
                            {
                                "conversation_id": "456e7890-e12b-34d5-a678-901234567890",
                                "created_at": "2024-01-01T01:00:00Z",
                                "last_used_model": "gemini/gemini-2.5-flash",
                                "last_used_provider": "gemini",
                                "message_count": 2
                            }
                        ]
                    }
                ]
            },
            "Customization": {
                "properties": {
                    "disable_query_system_prompt": {
                        "type": "boolean",
                        "title": "Disable Query System Prompt",
                        "default": false
                    },
                    "system_prompt_path": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "file-path"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "System Prompt Path"
                    },
                    "system_prompt": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "System Prompt"
                    }
                },
                "type": "object",
                "title": "Customization",
                "description": "Service customization."
            },
            "DatabaseConfiguration": {
                "properties": {
                    "sqlite": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/SQLiteDatabaseConfiguration"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "postgres": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/PostgreSQLDatabaseConfiguration"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object",
                "title": "DatabaseConfiguration",
                "description": "Database configuration."
            },
            "ErrorResponse": {
                "properties": {
                    "detail": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object",
                        "title": "Detail",
                        "description": "Error details",
                        "examples": [
                            {
                                "cause": "Failed to handle request to https://bam-api.res.ibm.com/v2/text",
                                "response": "Error while validation question"
                            },
                            {
                                "cause": "Invalid conversation ID 1237-e89b-12d3-a456-426614174000",
                                "response": "Error retrieving conversation history"
                            }
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "detail"
                ],
                "title": "ErrorResponse",
                "description": "Model representing error response for query endpoint.",
                "examples": [
                    {
                        "detail": {
                            "cause": "Failed to handle request to https://bam-api.res.ibm.com/v2/text",
                            "response": "Error while validation question"
                        }
                    },
                    {
                        "detail": {
                            "cause": "Invalid conversation ID 1237-e89b-12d3-a456-426614174000",
                            "response": "Error retrieving conversation history"
                        }
                    }
                ]
            },
            "FeedbackCategory": {
                "type": "string",
                "enum": [
                    "incorrect",
                    "not_relevant",
                    "incomplete",
                    "outdated_information",
                    "unsafe",
                    "other"
                ],
                "title": "FeedbackCategory",
                "description": "Enum representing predefined feedback categories for AI responses.\n\nThese categories help provide structured feedback about AI inference quality\nwhen users provide negative feedback (thumbs down). Multiple categories can\nbe selected to provide comprehensive feedback about response issues."
            },
            "FeedbackRequest": {
                "properties": {
                    "conversation_id": {
                        "type": "string",
                        "title": "Conversation Id",
                        "description": "The required conversation ID (UUID)",
                        "examples": [
                            "c5260aec-4d82-4370-9fdf-05cf908b3f16"
                        ]
                    },
                    "user_question": {
                        "type": "string",
                        "title": "User Question",
                        "description": "User question (the query string)",
                        "examples": [
                            "What is Kubernetes?"
                        ]
                    },
                    "llm_response": {
                        "type": "string",
                        "title": "Llm Response",
                        "description": "Response from LLM",
                        "examples": [
                            "Kubernetes is an open-source container orchestration system for automating ..."
                        ]
                    },
                    "sentiment": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Sentiment",
                        "description": "User sentiment, if provided must be -1 or 1",
                        "examples": [
                            -1,
                            1
                        ]
                    },
                    "user_feedback": {
                        "anyOf": [
                            {
                                "type": "string",
                                "maxLength": 4096
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "User Feedback",
                        "description": "Feedback on the LLM response.",
                        "examples": [
                            "I'm not satisfied with the response because it is too vague."
                        ]
                    },
                    "categories": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/FeedbackCategory"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Categories",
                        "description": "List of feedback categories that describe issues with the LLM response (for negative feedback).",
                        "examples": [
                            [
                                "incorrect",
                                "incomplete"
                            ]
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "conversation_id",
                    "user_question",
                    "llm_response"
                ],
                "title": "FeedbackRequest",
                "description": "Model representing a feedback request.\n\nAttributes:\n    conversation_id: The required conversation ID (UUID).\n    user_question: The required user question.\n    llm_response: The required LLM response.\n    sentiment: The optional sentiment.\n    user_feedback: The optional user feedback.\n    categories: The optional list of feedback categories (multi-select for negative feedback).\n\nExample:\n    ```python\n    feedback_request = FeedbackRequest(\n        conversation_id=\"12345678-abcd-0000-0123-456789abcdef\",\n        user_question=\"what are you doing?\",\n        user_feedback=\"This response is not helpful\",\n        llm_response=\"I don't know\",\n        sentiment=-1,\n        categories=[FeedbackCategory.INCORRECT, FeedbackCategory.INCOMPLETE]\n    )\n    ```",
                "examples": [
                    {
                        "conversation_id": "12345678-abcd-0000-0123-456789abcdef",
                        "llm_response": "bar",
                        "sentiment": -1,
                        "user_feedback": "Not satisfied with the response quality.",
                        "user_question": "foo"
                    },
                    {
                        "categories": [
                            "incorrect"
                        ],
                        "conversation_id": "12345678-abcd-0000-0123-456789abcdef",
                        "llm_response": "The capital of France is Berlin.",
                        "sentiment": -1,
                        "user_question": "What is the capital of France?"
                    },
                    {
                        "categories": [
                            "incomplete",
                            "not_relevant"
                        ],
                        "conversation_id": "12345678-abcd-0000-0123-456789abcdef",
                        "llm_response": "Use Docker.",
                        "sentiment": -1,
                        "user_feedback": "This response is too general and doesn't provide specific steps.",
                        "user_question": "How do I deploy a web app?"
                    }
                ]
            },
            "FeedbackResponse": {
                "properties": {
                    "response": {
                        "type": "string",
                        "title": "Response"
                    }
                },
                "type": "object",
                "required": [
                    "response"
                ],
                "title": "FeedbackResponse",
                "description": "Model representing a response to a feedback request.\n\nAttributes:\n    response: The response of the feedback request.\n\nExample:\n    ```python\n    feedback_response = FeedbackResponse(response=\"feedback received\")\n    ```",
                "examples": [
                    {
                        "response": "feedback received"
                    }
                ]
            },
            "ForbiddenResponse": {
                "properties": {
                    "detail": {
                        "type": "string",
                        "title": "Detail"
                    }
                },
                "type": "object",
                "required": [
                    "detail"
                ],
                "title": "ForbiddenResponse",
                "description": "Model representing response for forbidden access.",
                "examples": [
                    {
                        "detail": "Forbidden: User is not authorized to access this resource"
                    }
                ]
            },
            "HTTPValidationError": {
                "properties": {
                    "detail": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array",
                        "title": "Detail"
                    }
                },
                "type": "object",
                "title": "HTTPValidationError"
            },
            "InferenceConfiguration": {
                "properties": {
                    "default_model": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Default Model"
                    },
                    "default_provider": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Default Provider"
                    }
                },
                "type": "object",
                "title": "InferenceConfiguration",
                "description": "Inference configuration."
            },
            "InfoResponse": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "Service name",
                        "examples": [
                            "Lightspeed Stack"
                        ]
                    },
                    "version": {
                        "type": "string",
                        "title": "Version",
                        "description": "Service version",
                        "examples": [
                            "0.1.0",
                            "0.2.0",
                            "1.0.0"
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "version"
                ],
                "title": "InfoResponse",
                "description": "Model representing a response to an info request.\n\nAttributes:\n    name: Service name.\n    version: Service version.\n\nExample:\n    ```python\n    info_response = InfoResponse(\n        name=\"Lightspeed Stack\",\n        version=\"1.0.0\",\n    )\n    ```",
                "examples": [
                    {
                        "name": "Lightspeed Stack",
                        "version": "1.0.0"
                    }
                ]
            },
            "JsonPathOperator": {
                "type": "string",
                "enum": [
                    "equals",
                    "contains",
                    "in"
                ],
                "title": "JsonPathOperator",
                "description": "Supported operators for JSONPath evaluation."
            },
            "JwkConfiguration": {
                "properties": {
                    "url": {
                        "type": "string",
                        "minLength": 1,
                        "format": "uri",
                        "title": "Url"
                    },
                    "jwt_configuration": {
                        "$ref": "#/components/schemas/JwtConfiguration",
                        "default": {
                            "user_id_claim": "user_id",
                            "username_claim": "username",
                            "role_rules": []
                        }
                    }
                },
                "type": "object",
                "required": [
                    "url"
                ],
                "title": "JwkConfiguration",
                "description": "JWK configuration."
            },
            "JwtConfiguration": {
                "properties": {
                    "user_id_claim": {
                        "type": "string",
                        "title": "User Id Claim",
                        "default": "user_id"
                    },
                    "username_claim": {
                        "type": "string",
                        "title": "Username Claim",
                        "default": "username"
                    },
                    "role_rules": {
                        "items": {
                            "$ref": "#/components/schemas/JwtRoleRule"
                        },
                        "type": "array",
                        "title": "Role Rules"
                    }
                },
                "type": "object",
                "title": "JwtConfiguration",
                "description": "JWT configuration."
            },
            "JwtRoleRule": {
                "properties": {
                    "jsonpath": {
                        "type": "string",
                        "title": "Jsonpath"
                    },
                    "operator": {
                        "$ref": "#/components/schemas/JsonPathOperator"
                    },
                    "negate": {
                        "type": "boolean",
                        "title": "Negate",
                        "default": false
                    },
                    "value": {
                        "title": "Value"
                    },
                    "roles": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Roles"
                    }
                },
                "type": "object",
                "required": [
                    "jsonpath",
                    "operator",
                    "value",
                    "roles"
                ],
                "title": "JwtRoleRule",
                "description": "Rule for extracting roles from JWT claims."
            },
            "LivenessResponse": {
                "properties": {
                    "alive": {
                        "type": "boolean",
                        "title": "Alive"
                    }
                },
                "type": "object",
                "required": [
                    "alive"
                ],
                "title": "LivenessResponse",
                "description": "Model representing a response to a liveness request.\n\nAttributes:\n    alive: If app is alive.\n\nExample:\n    ```python\n    liveness_response = LivenessResponse(alive=True)\n    ```",
                "examples": [
                    {
                        "alive": true
                    }
                ]
            },
            "LlamaStackConfiguration": {
                "properties": {
                    "url": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Url"
                    },
                    "api_key": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Api Key"
                    },
                    "use_as_library_client": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Use As Library Client"
                    },
                    "library_client_config_path": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Library Client Config Path"
                    }
                },
                "type": "object",
                "title": "LlamaStackConfiguration",
                "description": "Llama stack configuration."
            },
            "ModelContextProtocolServer": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "provider_id": {
                        "type": "string",
                        "title": "Provider Id",
                        "default": "model-context-protocol"
                    },
                    "url": {
                        "type": "string",
                        "title": "Url"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "url"
                ],
                "title": "ModelContextProtocolServer",
                "description": "model context protocol server configuration."
            },
            "ModelsResponse": {
                "properties": {
                    "models": {
                        "items": {
                            "additionalProperties": true,
                            "type": "object"
                        },
                        "type": "array",
                        "title": "Models",
                        "description": "List of models available",
                        "examples": [
                            {
                                "api_model_type": "llm",
                                "identifier": "openai/gpt-4-turbo",
                                "metadata": {},
                                "model_type": "llm",
                                "provider_id": "openai",
                                "provider_resource_id": "gpt-4-turbo",
                                "type": "model"
                            },
                            {
                                "api_model_type": "llm",
                                "identifier": "openai/gpt-3.5-turbo-0125",
                                "metadata": {},
                                "model_type": "llm",
                                "provider_id": "openai",
                                "provider_resource_id": "gpt-3.5-turbo-0125",
                                "type": "model"
                            }
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "models"
                ],
                "title": "ModelsResponse",
                "description": "Model representing a response to models request."
            },
            "PostgreSQLDatabaseConfiguration": {
                "properties": {
                    "host": {
                        "type": "string",
                        "title": "Host",
                        "default": "localhost"
                    },
                    "port": {
                        "type": "integer",
                        "exclusiveMinimum": 0.0,
                        "title": "Port",
                        "default": 5432
                    },
                    "db": {
                        "type": "string",
                        "title": "Db"
                    },
                    "user": {
                        "type": "string",
                        "title": "User"
                    },
                    "password": {
                        "type": "string",
                        "title": "Password"
                    },
                    "namespace": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Namespace",
                        "default": "lightspeed-stack"
                    },
                    "ssl_mode": {
                        "type": "string",
                        "title": "Ssl Mode",
                        "default": "prefer"
                    },
                    "gss_encmode": {
                        "type": "string",
                        "title": "Gss Encmode",
                        "default": "prefer"
                    },
                    "ca_cert_path": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "file-path"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Ca Cert Path"
                    }
                },
                "type": "object",
                "required": [
                    "db",
                    "user",
                    "password"
                ],
                "title": "PostgreSQLDatabaseConfiguration",
                "description": "PostgreSQL database configuration."
            },
            "ProviderHealthStatus": {
                "properties": {
                    "provider_id": {
                        "type": "string",
                        "title": "Provider Id",
                        "description": "The ID of the provider"
                    },
                    "status": {
                        "type": "string",
                        "title": "Status",
                        "description": "The health status",
                        "examples": [
                            "ok",
                            "unhealthy",
                            "not_implemented"
                        ]
                    },
                    "message": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Message",
                        "description": "Optional message about the health status",
                        "examples": [
                            "All systems operational",
                            "Llama Stack is unavailable"
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "provider_id",
                    "status"
                ],
                "title": "ProviderHealthStatus",
                "description": "Model representing the health status of a provider.\n\nAttributes:\n    provider_id: The ID of the provider.\n    status: The health status ('ok', 'unhealthy', 'not_implemented').\n    message: Optional message about the health status."
            },
            "QueryRequest": {
                "properties": {
                    "query": {
                        "type": "string",
                        "title": "Query",
                        "description": "The query string",
                        "examples": [
                            "What is Kubernetes?"
                        ]
                    },
                    "conversation_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Conversation Id",
                        "description": "The optional conversation ID (UUID)",
                        "examples": [
                            "c5260aec-4d82-4370-9fdf-05cf908b3f16"
                        ]
                    },
                    "provider": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Provider",
                        "description": "The optional provider",
                        "examples": [
                            "openai",
                            "watsonx"
                        ]
                    },
                    "model": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Model",
                        "description": "The optional model",
                        "examples": [
                            "gpt4mini"
                        ]
                    },
                    "system_prompt": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "System Prompt",
                        "description": "The optional system prompt.",
                        "examples": [
                            "You are OpenShift assistant.",
                            "You are Ansible assistant."
                        ]
                    },
                    "attachments": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/Attachment"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Attachments",
                        "description": "The optional list of attachments.",
                        "examples": [
                            {
                                "attachment_type": "log",
                                "content": "this is attachment",
                                "content_type": "text/plain"
                            },
                            {
                                "attachment_type": "configuration",
                                "content": "kind: Pod\n metadata:\n name:    private-reg",
                                "content_type": "application/yaml"
                            },
                            {
                                "attachment_type": "configuration",
                                "content": "foo: bar",
                                "content_type": "application/yaml"
                            }
                        ]
                    },
                    "no_tools": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "No Tools",
                        "description": "Whether to bypass all tools and MCP servers",
                        "default": false,
                        "examples": [
                            true,
                            false
                        ]
                    },
                    "media_type": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Media Type",
                        "description": "Media type (used just to enable compatibility)",
                        "examples": [
                            "application/json"
                        ]
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "query"
                ],
                "title": "QueryRequest",
                "description": "Model representing a request for the LLM (Language Model).\n\nAttributes:\n    query: The query string.\n    conversation_id: The optional conversation ID (UUID).\n    provider: The optional provider.\n    model: The optional model.\n    system_prompt: The optional system prompt.\n    attachments: The optional attachments.\n    no_tools: Whether to bypass all tools and MCP servers (default: False).\n\nExample:\n    ```python\n    query_request = QueryRequest(query=\"Tell me about Kubernetes\")\n    ```",
                "examples": [
                    {
                        "attachments": [
                            {
                                "attachment_type": "log",
                                "content": "this is attachment",
                                "content_type": "text/plain"
                            },
                            {
                                "attachment_type": "configuration",
                                "content": "kind: Pod\n metadata:\n    name: private-reg",
                                "content_type": "application/yaml"
                            },
                            {
                                "attachment_type": "configuration",
                                "content": "foo: bar",
                                "content_type": "application/yaml"
                            }
                        ],
                        "conversation_id": "123e4567-e89b-12d3-a456-426614174000",
                        "model": "model-name",
                        "no_tools": false,
                        "provider": "openai",
                        "query": "write a deployment yaml for the mongodb image",
                        "system_prompt": "You are a helpful assistant"
                    }
                ]
            },
            "QueryResponse": {
                "properties": {
                    "conversation_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Conversation Id",
                        "description": "The optional conversation ID (UUID)",
                        "examples": [
                            "c5260aec-4d82-4370-9fdf-05cf908b3f16"
                        ]
                    },
                    "response": {
                        "type": "string",
                        "title": "Response",
                        "description": "Response from LLM",
                        "examples": [
                            "Kubernetes is an open-source container orchestration system for automating ..."
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "response"
                ],
                "title": "QueryResponse",
                "description": "Model representing LLM response to a query.\n\nAttributes:\n    conversation_id: The optional conversation ID (UUID).\n    response: The response.",
                "examples": [
                    {
                        "conversation_id": "123e4567-e89b-12d3-a456-426614174000",
                        "response": "Operator Lifecycle Manager (OLM) helps users install..."
                    }
                ]
            },
            "ReadinessResponse": {
                "properties": {
                    "ready": {
                        "type": "boolean",
                        "title": "Ready"
                    },
                    "reason": {
                        "type": "string",
                        "title": "Reason"
                    },
                    "providers": {
                        "items": {
                            "$ref": "#/components/schemas/ProviderHealthStatus"
                        },
                        "type": "array",
                        "title": "Providers"
                    }
                },
                "type": "object",
                "required": [
                    "ready",
                    "reason",
                    "providers"
                ],
                "title": "ReadinessResponse",
                "description": "Model representing response to a readiness request.\n\nAttributes:\n    ready: If service is ready.\n    reason: The reason for the readiness.\n    providers: List of unhealthy providers in case of readiness failure.\n\nExample:\n    ```python\n    readiness_response = ReadinessResponse(\n        ready=False,\n        reason=\"Service is not ready\",\n        providers=[\n            ProviderHealthStatus(\n                provider_id=\"ollama\",\n                status=\"unhealthy\",\n                message=\"Server is unavailable\"\n            )\n        ]\n    )\n    ```",
                "examples": [
                    {
                        "providers": [],
                        "ready": true,
                        "reason": "Service is ready"
                    }
                ]
            },
            "SQLiteDatabaseConfiguration": {
                "properties": {
                    "db_path": {
                        "type": "string",
                        "title": "Db Path"
                    }
                },
                "type": "object",
                "required": [
                    "db_path"
                ],
                "title": "SQLiteDatabaseConfiguration",
                "description": "SQLite database configuration."
            },
            "ServiceConfiguration": {
                "properties": {
                    "host": {
                        "type": "string",
                        "title": "Host",
                        "default": "localhost"
                    },
                    "port": {
                        "type": "integer",
                        "exclusiveMinimum": 0.0,
                        "title": "Port",
                        "default": 8080
                    },
                    "auth_enabled": {
                        "type": "boolean",
                        "title": "Auth Enabled",
                        "default": false
                    },
                    "workers": {
                        "type": "integer",
                        "exclusiveMinimum": 0.0,
                        "title": "Workers",
                        "default": 1
                    },
                    "color_log": {
                        "type": "boolean",
                        "title": "Color Log",
                        "default": true
                    },
                    "access_log": {
                        "type": "boolean",
                        "title": "Access Log",
                        "default": true
                    },
                    "tls_config": {
                        "$ref": "#/components/schemas/TLSConfiguration",
                        "default": {}
                    },
                    "cors": {
                        "$ref": "#/components/schemas/CORSConfiguration",
                        "default": {
                            "allow_origins": [
                                "*"
                            ],
                            "allow_credentials": false,
                            "allow_methods": [
                                "*"
                            ],
                            "allow_headers": [
                                "*"
                            ]
                        }
                    }
                },
                "type": "object",
                "title": "ServiceConfiguration",
                "description": "Service configuration."
            },
            "StatusResponse": {
                "properties": {
                    "functionality": {
                        "type": "string",
                        "title": "Functionality"
                    },
                    "status": {
                        "additionalProperties": true,
                        "type": "object",
                        "title": "Status"
                    }
                },
                "type": "object",
                "required": [
                    "functionality",
                    "status"
                ],
                "title": "StatusResponse",
                "description": "Model representing a response to a status request.\n\nAttributes:\n    functionality: The functionality of the service.\n    status: The status of the service.\n\nExample:\n    ```python\n    status_response = StatusResponse(\n        functionality=\"feedback\",\n        status={\"enabled\": True},\n    )\n    ```",
                "examples": [
                    {
                        "functionality": "feedback",
                        "status": {
                            "enabled": true
                        }
                    }
                ]
            },
            "TLSConfiguration": {
                "properties": {
                    "tls_certificate_path": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "file-path"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tls Certificate Path"
                    },
                    "tls_key_path": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "file-path"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tls Key Path"
                    },
                    "tls_key_password": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "file-path"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tls Key Password"
                    }
                },
                "type": "object",
                "title": "TLSConfiguration",
                "description": "TLS configuration."
            },
            "UnauthorizedResponse": {
                "properties": {
                    "detail": {
                        "type": "string",
                        "title": "Detail"
                    }
                },
                "type": "object",
                "required": [
                    "detail"
                ],
                "title": "UnauthorizedResponse",
                "description": "Model representing response for missing or invalid credentials.",
                "examples": [
                    {
                        "detail": "Unauthorized: No auth header found"
                    }
                ]
            },
            "UserDataCollection": {
                "properties": {
                    "feedback_enabled": {
                        "type": "boolean",
                        "title": "Feedback Enabled",
                        "default": false
                    },
                    "feedback_storage": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Feedback Storage"
                    },
                    "transcripts_enabled": {
                        "type": "boolean",
                        "title": "Transcripts Enabled",
                        "default": false
                    },
                    "transcripts_storage": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Transcripts Storage"
                    }
                },
                "type": "object",
                "title": "UserDataCollection",
                "description": "User data collection configuration."
            },
            "ValidationError": {
                "properties": {
                    "loc": {
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        },
                        "type": "array",
                        "title": "Location"
                    },
                    "msg": {
                        "type": "string",
                        "title": "Message"
                    },
                    "type": {
                        "type": "string",
                        "title": "Error Type"
                    }
                },
                "type": "object",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "title": "ValidationError"
            }
        }
    }
}